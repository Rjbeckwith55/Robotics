'2017 MRDC Mecanum Wheel drive code for roboteq2 on Scoot
'Controls 2 of the 4 motors for the mecanum drive
'There are more comments on the roboteq1 version
dim maxpwm as integer
dim minpwm as integer
dim moving as boolean

top:

'Get the PWM value from the R/C reciever.
'getvalue(What you would like to capture , Channel it is plugged into).
hor1 = getvalue(_PI, 1) ' RIGHT stick left/right
vert1 = getvalue(_PI, 2) ' RIGHT stick up/down
switch1 = getvalue(_PI, 4) ' back left TOGGLE switch
hor2 = getvalue(_PI, 3) ' LEFT stick left/right
vert2 = getvalue(_PI, 5) ' LEFT stick up/down

'1500 pwm is zero (no axis on controller moved)-set max and min pwm
maxpwm = 1900
minpwm = 1100
'set threshold pwm (Won't move unless |sitck value-center|>50 (center=1500pwm))
threshold2 = 1550
threshold1 = 1450

'Center the command values (V1, V2, V3), 1500 PWM is the center of the R/C controller
V1 = hor1 - 1500
V2 = vert1 - 1500
V3 = hor2 - 1500

'Check to see if the channels are plugged in and the controller is recieving properly.
'Nothing will happen if one of the channels is not recieving properly. (Change this in an actual competition)
if (hor1 = 0 or hor2 = 0 or vert1 = 0 or vert2 > 1900)
	V1 = 0
	V2 = 0
	V3 = 0
end if

'Set limits to the pwm -400 to 400
if vert1 > maxpwm
	vert1 = maxpwm
elseif vert1 < minpwm
	vert1 = minpwm
elseif hor1 > maxpwm
	hor1 = maxpwm
elseif hor1 < minpwm
	hor1 = minpwm
elseif hor2 < minpwm
	hor2 = minpwm
elseif hor2 > maxpwm
	hor2 = maxpwm
end if

'Set the motor commands to strafe to the right or left
'_G = turn on motor
'setcommand(command, motor 1 or motor 2 on the roboteq, speed of the motor(0-1000))
'SetCANCommand uses can communication wiring to communicate with the slave
'Wiring goes from CANL to CANL then CANH to CANH then has 2 120 ohm resistors from CANL wires to CANH
if switch1 < minpwm
	if hor1 < threshold1 and abs(V1) > abs(V2) 'LEFT
		setcommand(_G,1,V1 * 2)
		setcommand(_G,2,-V1 * 2)
		SetCANCommand(01,_G,1,-V1 * 2) 
		SetCANCommand(01,_G,2,V1 * 2)
	elseif hor1 > threshold2 and abs(V1) > abs(V2) 'RIGHT
		setcommand(_G,1,V1 * 2)
		setcommand(_G,2,-V1 * 2)
		setCANcommand(01,_G,1,-V1 * 2) 
		setCANcommand(01,_G,2,V1 * 2)
	elseif vert1 < threshold1 and abs(V2) > abs(V1)
		speedDif = 1000 + (-V2 * 2 - V3)
		setcommand(_G,1,V2 * 2 - V3)
		setcommand(_G,2,V2 * 2 - V3)
		setCANcommand(01,_G,1,-V2 * 2 - V3)
		setCANcommand(01,_G,2,-V2 * 2 - V3)
	elseif vert1 > threshold2 and abs(V2) > abs(V1)
		setcommand(_G,1,V2 * 2 - V3)
		setcommand(_G,1,V2 * 2 - V3)
		setCANcommand(01,_G,1,-V2 * 2 - V3)
		setCANcommand(01,_G,2,-V2 * 2 - V3)
	else
		'Set motor speed to zero when controller is not being moved.
		setcommand(_G,2,0)
		setcommand(_G,1,0)
		setCANcommand(01,_G,2,0)
		setCANcommand(01,_G,1,0)
	end if
elseif switch1 > maxpwm
	if hor1 < threshold1 and abs(V1) > abs(V2) 'LEFT
		setcommand(_G,1,V1 + (V3/2)) 'Back Left
		setcommand(_G,2,-V1 + (V3/2)) 'Front Right
		SetCANCommand(01,_G,1,-V1 + (V3/2)) 'Front Right
		SetCANCommand(01,_G,2,V1 + (V3/2)) 'Back Right
	elseif hor1 > threshold2 and abs(V1) > abs(V2) 'RIGHT
		setcommand(_G,1,V1 + (V3/2))
		setcommand(_G,2,-V1 + (V3/2))
		setCancommand(01,_G,1,-V1 + (V3/2)) 
		setCancommand(01,_G,2,V1 + (V3/2))
	elseif vert1 < threshold1 and abs(V2) > abs(V1) or hor2 < threshold1
		setcommand(_G,1,V2 - (V3/2))
		setcommand(_G,2,V2 - (V3/2))
		setCancommand(01,_G,1,-V2 - (V3/2))
		setCancommand(01,_G,2,-V2 - (V3/2))
	elseif vert1 > threshold2 and abs(V2) > abs(V1) or hor2 > threshold2
		setcommand(_G,1,V2 - (V3/2))
		setcommand(_G,2,V2 - (V3/2))
		setCANcommand(01,_G,1,-V2 - (V3/2))
		setCANcommand(01,_G,2,-V2 - (V3/2))
	else
		'Set motor speed to zero when controller is not being moved.
		setcommand(_G,2,0)
		setcommand(_G,1,0)
		setCANcommand(01,_G,2,0)
		setCANcommand(01,_G,1,0)
	end if
end if
goto top
